import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { 
  BarChart3, ThumbsUp, ThumbsDown, Award, Crown, Loader2, RefreshCw, AlertCircle,
  BarChart2, ArrowUpRight, Download, Share2, Clock, MessageSquare, User, Star, Play,
  Building, Briefcase, Calendar
} from 'lucide-react';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { getFeedback, getInterview, startFeedbackProcessing } from '../services/InterviewService';
import { getScoreColor, getScoreTextColor, getScoreBackgroundColor, getScoreRating } from '../lib/utils.tsx';
import { nextStepsRecommendations } from '../data/feedback';
import { useAuth } from '../hooks/useAuth';
import BackButton from '../components/layout/BackButton';
import Breadcrumb from '../components/layout/Breadcrumb';
import AIInsightsDisplay from '../components/feedback/AIInsightsDisplay';

interface FeedbackData {
  interviewId: string;
  title: string;
  date: string;
  company?: string | null;
  role?: string;
  completed_at?: string;
  processing_status?: string;
  error_message?: string;
  duration: number;
  overallScore: number;
  summary: string;
  strengths: string[];
  improvements: string[];
  questionResponses: {
    question: string;
    analysis: string;
    score: number;
    feedback: string;
  }[];
  skillAssessment: {
    technical: {
      score: number;
      feedback: string;
    };
    communication: {
      score: number;
      feedback: string;
    };
    problemSolving: {
      score: number;
      feedback: string;
    };
    experience: {
      score: number;
      feedback: string;
    };
  };
  transcript?: string | null;
  tavus_analysis?: any;
  difficulty_levels?: {
    value: string;
    label: string;
  };
  experience_levels?: {
    value: string;
    label: string;
  };
}

const FeedbackAnalysis: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [feedbackData, setFeedbackData] = useState<FeedbackData | null>(null);
  const [activeTab, setActiveTab] = useState('summary');
  const [isSimulating, setIsSimulating] = useState(false);
  const [interviewStatus, setInterviewStatus] = useState<string | null>(null);
  const [isPolling, setIsPolling] = useState(false);
  const [retryingFeedback, setRetryingFeedback] = useState(false);
  
  useEffect(() => {
    loadFeedback();
  }, [id, user]);
  
  const loadFeedback = async () => {
      setLoading(true);
      try {
        if (id) {
          // Fetch both feedback and interview status
          const [feedback, interview] = await Promise.all([
            getFeedback(id),
            getInterview(id)
          ]);

          if (interview) {
            setInterviewStatus(interview.feedback_processing_status);
          }

          if (feedback && feedback.processing_status === 'completed') {
            setFeedbackData(feedback);
          } else if (feedback && (feedback.processing_status === 'processing' || feedback.processing_status === 'pending')) {
            // If feedback is still processing, set minimal data
            setFeedbackData({
              ...feedback,
              overallScore: 0,
              summary: 'Feedback is currently being generated by AI. This may take a few minutes.',
              strengths: [],
              improvements: [],
              questionResponses: [],
              skillAssessment: {
                technical: { score: 0, feedback: '' },
                communication: { score: 0, feedback: '' },
                problemSolving: { score: 0, feedback: '' },
                experience: { score: 0, feedback: '' }
              },
              processing_status: feedback.processing_status,
              error_message: feedback.error_message
            });
          } else if (feedback && feedback.processing_status === 'failed') {
            setFeedbackData({
              ...feedback,
              overallScore: 0,
              summary: feedback.error_message || 'Feedback generation failed. Please try again later.',
              processing_status: feedback.processing_status,
              error_message: feedback.error_message
            });
          }
        }
      } catch (error) {
        console.error('Error loading feedback:', error);
      } finally {
        // Simulate a minimum loading time for better UX
        if (interviewStatus !== 'processing' && interviewStatus !== 'pending') {
          setTimeout(() => {
            setLoading(false);
          }, 1500);
        } else {
          // If processing, set up polling
          const pollInterval = setInterval(async () => {
            try {
              const { data, error } = await supabase
                .from('interviews')
                .select('feedback_processing_status')
                .eq('id', id)
                .single();
              
              if (error) throw error;
              
              setInterviewStatus(data.feedback_processing_status);
              
              if (data.feedback_processing_status === 'completed' || 
                  data.feedback_processing_status === 'failed') {
                clearInterval(pollInterval);
                // Reload feedback data
                const updatedFeedback = await getFeedback(id);
                setFeedbackData(updatedFeedback);
                setLoading(false);
              }
            } catch (error) {
              console.error('Error polling interview status:', error);
              clearInterval(pollInterval);
              setLoading(false);
            }
          }, 5000); // Poll every 5 seconds
          
          return () => clearInterval(pollInterval);
        }
      }
  };
  
  // Function to handle simulating feedback
  const handleSimulateFeedback = async () => {
    if (!id || !feedbackData) return;
    
    setRetryingFeedback(true);
    
    try {
      // Optimistically update UI to show processing state
      setFeedbackData(prev => {
        if (!prev) return null;
        return {
          ...prev,
          processing_status: 'processing'
        };
      });
      
      setInterviewStatus('processing');
      
      // Use the conversation ID from feedbackData or fallback to hardcoded ID
      const conversationId = feedbackData.tavus_conversation_id || 'c2e296520d0b9402';
      
      // Call the edge function to simulate feedback
      const success = await startFeedbackProcessing(id, conversationId, feedbackData);
      
      if (!success) {
        throw new Error('Failed to start feedback processing');
      }
      
      // Set up polling to check for feedback completion
      const pollInterval = setInterval(async () => {
        try {
          const { data, error } = await supabase
            .from('interviews')
            .select('feedback_processing_status')
            .eq('id', id)
            .single();
          
          if (error) throw error;
          
          setInterviewStatus(data.feedback_processing_status);
          
          if (data.feedback_processing_status === 'completed' || 
              data.feedback_processing_status === 'failed') {
            clearInterval(pollInterval);
            // Reload feedback data
            const updatedFeedback = await getFeedback(id);
            setFeedbackData(updatedFeedback);
            setRetryingFeedback(false);
          }
        } catch (error) {
          console.error('Error polling interview status:', error);
          clearInterval(pollInterval);
          setRetryingFeedback(false);
        }
      }, 3000); // Poll every 3 seconds
      
      // Clear interval after 2 minutes as a safety measure
      setTimeout(() => {
        clearInterval(pollInterval);
        setRetryingFeedback(false);
      }, 120000);
      
    } catch (error) {
      console.error('Error simulating feedback:', error);
      setFeedbackData(prev => {
        if (!prev) return null;
        return {
          ...prev,
          processing_status: 'failed',
          error_message: error instanceof Error ? error.message : 'Unknown error occurred'
        };
      });
      setInterviewStatus('failed');
      setRetryingFeedback(false);
    }
  };
  
  // Show loading state
  if (loading && !feedbackData) {
    return (
      <div className="min-h-screen relative overflow-hidden pt-24 pb-12">
        {/* Background gradient for light theme, pure black for dark */}
        <div className="fixed inset-0 z-0 pointer-events-none">
          <div className="absolute inset-0 bg-gradient-to-br from-slate-50 via-blue-50 to-purple-100 dark:hidden" />
          <div className="absolute inset-0 hidden dark:block bg-black" />
        </div>
        <div className="container-custom mx-auto relative z-10">
          <Breadcrumb />
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="mb-8"
          >
            <BackButton className="mb-4" />
            <h1 className="text-3xl font-bold mb-2">Interview Feedback</h1>
            <p className="text-gray-600">
              Your interview feedback is being generated
            </p>
          </motion.div>
          
          <div className="flex flex-col items-center justify-center py-12">
            <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary-600 mb-8"></div>
            <h2 className="text-2xl font-semibold mb-4">Analyzing Your Interview</h2>
            <p className="text-gray-600 text-center max-w-md">
              We're generating comprehensive feedback based on your interview performance. 
              This may take a few minutes.
            </p>
            <Button 
              variant="outline" 
              className="mt-8"
              onClick={() => window.location.href = '/dashboard'}
            >
              Return to Dashboard
            </Button>
          </div>
        </div>
      </div>
    );
  }

  if (!feedbackData) {
    return (
      <div className="min-h-screen relative overflow-hidden pt-24 pb-12">
        {/* Background gradient for light theme, pure black for dark */}
        <div className="fixed inset-0 z-0 pointer-events-none">
          <div className="absolute inset-0 bg-gradient-to-br from-slate-50 via-blue-50 to-purple-100 dark:hidden" />
          <div className="absolute inset-0 hidden dark:block bg-black" />
        </div>
        <div className="container-custom mx-auto relative z-10">
          <Breadcrumb />
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="mb-8"
          >
            <BackButton className="mb-4" />
            <h1 className="text-3xl font-bold mb-2">Interview Feedback</h1>
            <p className="text-gray-600">
              Feedback not available
            </p>
          </motion.div>
          
          <div className="flex flex-col items-center justify-center py-12">
            <h2 className="text-2xl font-semibold mb-4">Feedback Not Found</h2>
            <p className="text-gray-600 text-center max-w-md mb-8">
              We couldn't find feedback for this interview. It may still be processing or there might have been an issue.
            </p>
            <Button onClick={() => window.location.href = '/dashboard'}>
              Return to Dashboard
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen relative overflow-hidden pt-24 pb-12">
      {/* Background gradient for light theme, pure black for dark */}
      <div className="fixed inset-0 z-0 pointer-events-none">
        <div className="absolute inset-0 bg-gradient-to-br from-slate-50 via-blue-50 to-purple-100 dark:hidden" />
        <div className="absolute inset-0 hidden dark:block bg-black" />
      </div>
      <div className="container-custom mx-auto relative z-10">
        <Breadcrumb />
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
          className="mb-8"
        >
          <BackButton className="mb-4" />
          <h1 className="text-3xl font-bold mb-2">Interview Feedback</h1>
          <p className="text-gray-600">
            {feedbackData.title} • {new Date(feedbackData.date).toLocaleDateString('en-US', { 
              month: 'long', 
              day: 'numeric',
              year: 'numeric'
            })}
            {feedbackData.company && ` • ${feedbackData.company}`}
            {feedbackData.role && ` • ${feedbackData.role}`}
          </p>
        </motion.div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
              className="mb-8"
            >
              <Card className="overflow-hidden bg-white dark:bg-slate-900/90 border border-gray-100 dark:border-slate-700">
                <div className="border-b border-gray-200 dark:border-slate-700">
                  <div className="flex">
                    <button
                      className={`px-6 py-4 font-medium text-sm transition-colors ${
                        activeTab === 'summary'
                          ? 'text-primary-600 border-b-2 border-primary-600 dark:text-blue-400 dark:border-blue-400'
                          : 'text-gray-600 hover:text-gray-900 dark:text-slate-400 dark:hover:text-white'
                      }`}
                      onClick={() => setActiveTab('summary')}
                    >
                      Summary
                    </button>
                    <button
                      className={`px-6 py-4 font-medium text-sm transition-colors ${
                        activeTab === 'skills'
                          ? 'text-primary-600 border-b-2 border-primary-600 dark:text-blue-400 dark:border-blue-400'
                          : 'text-gray-600 hover:text-gray-900 dark:text-slate-400 dark:hover:text-white'
                      }`}
                      onClick={() => setActiveTab('skills')}
                    >
                      Skills Assessment
                    </button>
                    <button
                      className={`px-6 py-4 font-medium text-sm transition-colors ${
                        activeTab === 'transcript'
                          ? 'text-primary-600 border-b-2 border-primary-600 dark:text-blue-400 dark:border-blue-400'
                          : 'text-gray-600 hover:text-gray-900 dark:text-slate-400 dark:hover:text-white'
                      }`}
                      onClick={() => setActiveTab('transcript')}
                    >
                      Transcript & Analysis
                    </button>
                  </div>
                </div>
                
                <CardContent className="p-6">
                  {/* Summary Tab */}
                  {activeTab === 'summary' && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 0.2 }}
                    >
                     <div className="mb-6">
                       <h2 className="text-xl font-semibold mb-3 dark:text-slate-100">Overall Performance</h2>
                       <p className="text-gray-700 dark:text-slate-300 mb-6">{feedbackData.summary}</p>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div>
                            <h3 className="font-medium mb-3 text-green-700 dark:text-green-300 flex items-center gap-2">
                              <ThumbsUp className="h-5 w-5" />
                              Strengths
                            </h3>
                            <ul className="space-y-2">
                              {feedbackData.strengths.map((strength, index) => (
                                <li key={index} className="flex items-start gap-2">
                                  <div className="w-5 h-5 rounded-full bg-green-100 dark:bg-green-900 flex-shrink-0 flex items-center justify-center mt-0.5">
                                    <span className="text-green-700 dark:text-green-300 text-xs">✓</span>
                                  </div>
                                  <span className="text-gray-700 dark:text-slate-200">{strength}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                          
                          <div>
                            <h3 className="font-medium mb-3 text-amber-700 dark:text-amber-300 flex items-center gap-2">
                              <ThumbsDown className="h-5 w-5" />
                              Areas for Improvement
                            </h3>
                            <ul className="space-y-2">
                              {feedbackData.improvements.map((improvement, index) => (
                                <li key={index} className="flex items-start gap-2">
                                  <div className="w-5 h-5 rounded-full bg-amber-100 dark:bg-amber-900 flex-shrink-0 flex items-center justify-center mt-0.5">
                                    <span className="text-amber-700 dark:text-amber-300 text-xs">!</span>
                                  </div>
                                  <span className="text-gray-700 dark:text-slate-200">{improvement}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      </div>
                      
                      <div className="mt-8">
                        <h3 className="font-medium mb-4 dark:text-slate-100">Key Metrics</h3>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                          <MetricCard 
                            label="Overall Score" 
                            value={`${feedbackData.overallScore}%`} 
                            icon={<Award className="h-5 w-5 text-primary-600" />}
                          />
                          <MetricCard 
                            label="Duration" 
                            value={`${feedbackData.duration} min`} 
                            icon={<Clock className="h-5 w-5 text-primary-600" />}
                          />
                          <MetricCard 
                            label="Questions" 
                            value={feedbackData.questionResponses.length.toString()} 
                            icon={<MessageSquare className="h-5 w-5 text-primary-600" />}
                          />
                          <MetricCard 
                            label="Top Skill" 
                            value="Communication" 
                            icon={<Star className="h-5 w-5 text-primary-600" />}
                          />
                        </div>
                       
                       <div className="mt-4 p-4 bg-gray-50 dark:bg-slate-800/80 rounded-lg">
                         <h4 className="font-medium mb-3 dark:text-slate-100">Interview Configuration</h4>
                         <div className="grid grid-cols-2 gap-4">
                           <div className="flex items-center gap-2">
                             <div className="w-8 h-8 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center">
                               <Briefcase className="h-4 w-4 text-purple-600 dark:text-purple-300" />
                             </div>
                             <div>
                               <p className="text-xs text-gray-500">Position</p>
                               <p className="text-sm font-medium">
                                {feedbackData.role || "Not specified"}
                               </p>
                             </div>
                           </div>
                           <div className="flex items-center gap-2">
                             <div className="w-8 h-8 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center">
                               <Building className="h-4 w-4 text-indigo-600 dark:text-indigo-300" />
                             </div>
                             <div>
                               <p className="text-xs text-gray-500">Company</p>
                               <p className="text-sm font-medium">
                                {feedbackData.company || "Not specified"}
                               </p>
                             </div>
                           </div>
                           <div className="flex items-center gap-2">
                             <div className="w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
                               <Award className="h-4 w-4 text-blue-600 dark:text-blue-300" />
                             </div>
                             <div>
                               <p className="text-xs text-gray-500">Difficulty Level</p>
                               <p className="text-sm font-medium">
                                {(feedbackData as any).difficulty_levels?.label || "Standard"}
                               </p>
                             </div>
                           </div>
                           <div className="flex items-center gap-2">
                             <div className="w-8 h-8 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center">
                               <User className="h-4 w-4 text-green-600 dark:text-green-300" />
                             </div>
                             <div>
                               <p className="text-xs text-gray-500">Experience Level</p>
                               <p className="text-sm font-medium">
                                {(feedbackData as any).experience_levels?.label || "Mid-Level"}
                               </p>
                             </div>
                           </div>
                         </div>
                       </div>
                      </div>
                    </motion.div>
                  )}
                  
                  {/* Skills Assessment Tab */}
                  {activeTab === 'skills' && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 0.2 }}
                    >
                      <div className="mb-6">
                        <h2 className="text-xl font-semibold mb-4">Skills Assessment</h2>
                        
                        <div className="space-y-6">
                          <SkillBar 
                            label="Technical Knowledge" 
                            score={feedbackData.skillAssessment.technical.score} 
                            feedback={feedbackData.skillAssessment.technical.feedback}
                          />
                          
                          <SkillBar 
                            label="Communication" 
                            score={feedbackData.skillAssessment.communication.score} 
                            feedback={feedbackData.skillAssessment.communication.feedback}
                          />
                          
                          
                          <SkillBar 
                            label="Problem Solving" 
                            score={feedbackData.skillAssessment.problemSolving.score} 
                            feedback={feedbackData.skillAssessment.problemSolving.feedback}
                          />
                          <SkillBar 
                            label="Experience" 
                            score={feedbackData.skillAssessment.experience.score} 
                            feedback={feedbackData.skillAssessment.experience.feedback}
                          />
                          
                          <SkillBar 
                            label="Experience" 
                            score={feedbackData.skillAssessment.experience.score} 
                            feedback={feedbackData.skillAssessment.experience.feedback}
                          />
                        </div>
                      </div>
                      
                      <div className="mt-8 p-4 bg-gray-50 dark:bg-slate-800/80 rounded-lg">
                        <h3 className="font-medium mb-2">AI-Powered Recommendation</h3>
                        <p className="text-gray-700 dark:text-slate-300 text-sm">
                          Based on your performance, we recommend focusing on improving your system design skills and practicing more complex technical scenarios. Consider reviewing our advanced system design course and practicing with more challenging interview questions.
                        </p>
                      </div>
                    </motion.div>
                  )}
                  
                  {/* Transcript & Analysis Tab */}
                  {activeTab === 'transcript' && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 0.2 }}
                    >
                      <div className="mb-6">
                        <h2 className="text-xl font-semibold mb-3">Interview Transcript</h2>
                        {feedbackData.transcript ? (
                          <div className="bg-gray-50 dark:bg-slate-800/80 p-4 rounded-lg border border-gray-200 dark:border-slate-700 mb-6 max-h-96 overflow-y-auto">
                            <pre className="whitespace-pre-wrap font-mono text-sm">
                              {feedbackData.transcript && feedbackData.transcript.includes('user: ') 
                                ? feedbackData.transcript.substring(feedbackData.transcript.indexOf('user: ')) 
                                : feedbackData.transcript}
                            </pre>
                          </div>
                        ) : (
                          <div className="bg-gray-50 dark:bg-slate-800/80 p-4 rounded-lg border border-gray-200 dark:border-slate-700 mb-6">
                            <p className="text-gray-500 dark:text-slate-400 italic">No transcript available for this interview.</p>
                          </div>
                        )}
                        
                        <h2 className="text-xl font-semibold mb-3 mt-8">AI Analysis</h2>
                        {feedbackData.tavus_analysis ? (
                          <div className="bg-gray-50 dark:bg-slate-800/80 p-4 rounded-lg border border-gray-200 dark:border-slate-700 max-h-96 overflow-y-auto">
                            <pre className="text-sm text-gray-800">
                              {JSON.stringify(feedbackData.tavus_analysis, null, 2)}
                            </pre>
                          </div>
                        ) : (
                          <div className="bg-gray-50 dark:bg-slate-800/80 p-4 rounded-lg border border-gray-200 dark:border-slate-700">
                            <p className="text-gray-500 dark:text-slate-400 italic">No detailed analysis available for this interview.</p>
                          </div>
                        )}
                      </div>
                    </motion.div>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          </div>
          
          <div className="lg:col-span-1">
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.2 }}
              className="sticky top-24"
            >
              {feedbackData.processing_status === 'processing' ? (
                <Card className="mb-6 bg-white dark:bg-slate-900/90 border border-gray-100 dark:border-slate-700">
                  <CardContent className="p-6">
                    <div className="flex justify-between items-center mb-6">
                      <h3 className="font-semibold text-lg">Generating Feedback</h3>
                      <div className="w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
                        <Loader2 className="h-5 w-5 text-blue-600 dark:text-blue-300 animate-spin" />
                      </div>
                    </div>
                    
                    <div className="flex flex-col items-center justify-center mb-4">
                      <div className="relative w-32 h-32 flex items-center justify-center">
                        <div className="absolute inset-0 border-4 border-gray-200 dark:border-slate-700 rounded-full"></div>
                        <div className="absolute inset-0 border-4 border-blue-500 dark:border-blue-400 rounded-full border-t-transparent animate-spin"></div>
                        <div className="text-center">
                          <p className="text-lg font-medium text-gray-600 dark:text-slate-200">Generating</p>
                          <p className="text-sm text-gray-500 dark:text-slate-400">Please wait</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-center mb-6">
                      <p className="text-sm text-gray-600 dark:text-slate-400">
                        Your feedback is being generated. This may take a few minutes.
                      </p>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <Card className="mb-6 bg-white dark:bg-slate-900/90 border border-gray-100 dark:border-slate-700">
                  <CardContent className="p-6">
                    <div className="flex justify-between items-center mb-6">
                      <h3 className="font-semibold text-lg">Overall Score</h3>
                      <div className="w-10 h-10 rounded-full bg-primary-100 dark:bg-blue-900 flex items-center justify-center">
                        <BarChart2 className="h-5 w-5 text-primary-600 dark:text-blue-400" />
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-center mb-4">
                      <div className="relative w-32 h-32">
                        <svg className="w-full h-full" viewBox="0 0 100 100">
                          <circle
                            cx="50"
                            cy="50"
                            r="45"
                            fill="none"
                            stroke="#e5e7eb"
                            strokeWidth="10"
                          />
                          <circle
                            cx="50"
                            cy="50"
                            r="45"
                            fill="none"
                            stroke={getScoreColor(feedbackData.overallScore)}
                            strokeWidth="10"
                            strokeDasharray={`${2 * Math.PI * 45 * feedbackData.overallScore / 100} ${2 * Math.PI * 45 * (1 - feedbackData.overallScore / 100)}`}
                            strokeDashoffset={2 * Math.PI * 45 * 0.25}
                            strokeLinecap="round"
                          />
                        </svg>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <span className="text-3xl font-bold dark:text-slate-100">{feedbackData.overallScore}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-center mb-6">
                      <p className="text-lg font-medium dark:text-slate-200">
                        {getScoreRating(feedbackData.overallScore)}
                      </p>
                    </div>
                  </CardContent>
                </Card>
              )}
              
              <Card className="bg-white dark:bg-slate-900/90 border border-gray-100 dark:border-slate-700">
                <CardHeader>
                  <CardTitle className="text-lg font-semibold dark:text-slate-100">Next Steps</CardTitle>
                </CardHeader>
                <CardContent className="p-6 pt-0">
                  <ul className="space-y-3">
                    {nextStepsRecommendations.map((step, index) => (
                      <li key={index}>
                        <Link 
                          to={step.link} 
                          className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors dark:bg-slate-800/80 dark:hover:bg-slate-700"
                        >
                          <span className="font-medium dark:text-slate-100">{step.title}</span>
                          <ArrowUpRight className="h-4 w-4 text-gray-600 dark:text-slate-300" />
                        </Link>
                      </li>
                    ))}
                  </ul>
                  
                  <div className="mt-6 pt-6 border-t border-gray-200 dark:border-slate-700">
                    <Button 
                      asChild
                     variant="interview"
                     className="w-full flex items-center justify-center gap-2 font-medium"
                    >
                      <Link to="/setup">
                        Schedule New Interview
                      </Link>
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
};

interface MetricCardProps {
  label: string;
  value: string;
  icon: React.ReactNode;
}

const MetricCard: React.FC<MetricCardProps> = ({ label, value, icon }) => {
  return (
    <div className="bg-gray-50 dark:bg-slate-800/80 rounded-lg p-4">
      <div className="flex items-center gap-2 mb-2">
        {icon}
        <span className="text-sm text-gray-600 dark:text-slate-300">{label}</span>
      </div>
      <p className="text-xl font-semibold dark:text-slate-100">{value}</p>
    </div>
  );
};

interface SkillBarProps {
  label: string;
  score: number;
  feedback: string;
}

const SkillBar: React.FC<SkillBarProps> = ({ label, score, feedback }) => {
  return (
    <div>
      <div className="flex justify-between items-center mb-2">
        <span className="font-medium dark:text-slate-100">{label}</span>
        <span className={`text-sm font-medium ${getScoreTextColor(score)}`}>{score}%</span>
      </div>
      <div className="h-2 bg-gray-200 dark:bg-slate-700 rounded-full overflow-hidden mb-2">
        <div 
          className={`h-full rounded-l-full ${getScoreBackgroundColor(score)}`}
          style={{ width: `${score}%` }}
        ></div>
      </div>
      <p className="text-sm text-gray-600 dark:text-slate-300">{feedback}</p>
    </div>
  );
};

export default FeedbackAnalysis;